-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Type-classes to convert values to and from ByteString.
--   
--   Defines the type-classes <a>ToByteString</a> and <a>FromByteString</a>
--   to convert values to and from ByteString.
@package bytestring-conversion
@version 0.3.1

module Data.ByteString.Conversion.From

-- | Parse <a>ByteString</a>s.
class FromByteString a
parser :: FromByteString a => Parser a
fromByteString :: FromByteString a => ByteString -> Maybe a
fromByteString' :: FromByteString a => ByteString -> Maybe a
runParser :: Parser a -> ByteString -> Either String a
runParser' :: Parser a -> ByteString -> Either String a
instance Data.ByteString.Conversion.From.FromByteString Data.ByteString.Internal.ByteString
instance Data.ByteString.Conversion.From.FromByteString Data.ByteString.Lazy.Internal.ByteString
instance Data.ByteString.Conversion.From.FromByteString a => Data.ByteString.Conversion.From.FromByteString (Data.ByteString.Conversion.Internal.List a)
instance (Data.CaseInsensitive.Internal.FoldCase a, Data.ByteString.Conversion.From.FromByteString a) => Data.ByteString.Conversion.From.FromByteString (Data.CaseInsensitive.Internal.CI a)
instance Data.ByteString.Conversion.From.FromByteString GHC.Types.Char
instance Data.ByteString.Conversion.From.FromByteString [GHC.Types.Char]
instance Data.ByteString.Conversion.From.FromByteString Data.Text.Internal.Text
instance Data.ByteString.Conversion.From.FromByteString Data.Text.Internal.Lazy.Text
instance Data.ByteString.Conversion.From.FromByteString GHC.Types.Bool
instance Data.ByteString.Conversion.From.FromByteString GHC.Types.Double
instance Data.ByteString.Conversion.From.FromByteString GHC.Integer.Type.Integer
instance Data.ByteString.Conversion.From.FromByteString GHC.Types.Int
instance Data.ByteString.Conversion.From.FromByteString GHC.Int.Int8
instance Data.ByteString.Conversion.From.FromByteString GHC.Int.Int16
instance Data.ByteString.Conversion.From.FromByteString GHC.Int.Int32
instance Data.ByteString.Conversion.From.FromByteString GHC.Int.Int64
instance Data.ByteString.Conversion.From.FromByteString GHC.Types.Word
instance Data.ByteString.Conversion.From.FromByteString GHC.Word.Word8
instance Data.ByteString.Conversion.From.FromByteString GHC.Word.Word16
instance Data.ByteString.Conversion.From.FromByteString GHC.Word.Word32
instance Data.ByteString.Conversion.From.FromByteString GHC.Word.Word64
instance (GHC.Real.Integral a, Data.Bits.Bits a) => Data.ByteString.Conversion.From.FromByteString (Data.ByteString.Conversion.Internal.Hex a)

module Data.ByteString.Conversion.To
class ToByteString a
builder :: ToByteString a => a -> Builder
toByteString :: ToByteString a => a -> ByteString

-- | Please note that this needs to convert from a lazy <a>ByteString</a>
--   to a strict one which involves copying the whole string.
toByteString' :: ToByteString a => a -> ByteString
runBuilder :: Builder -> ByteString
instance Data.ByteString.Conversion.To.ToByteString Data.ByteString.Builder.Internal.Builder
instance Data.ByteString.Conversion.To.ToByteString Data.ByteString.Lazy.Internal.ByteString
instance Data.ByteString.Conversion.To.ToByteString Data.ByteString.Internal.ByteString
instance Data.ByteString.Conversion.To.ToByteString Data.Text.Internal.Text
instance Data.ByteString.Conversion.To.ToByteString Data.Text.Internal.Lazy.Text
instance Data.ByteString.Conversion.To.ToByteString GHC.Types.Char
instance Data.ByteString.Conversion.To.ToByteString [GHC.Types.Char]
instance Data.ByteString.Conversion.To.ToByteString GHC.Types.Float
instance Data.ByteString.Conversion.To.ToByteString GHC.Types.Double
instance Data.ByteString.Conversion.To.ToByteString GHC.Types.Int
instance Data.ByteString.Conversion.To.ToByteString GHC.Int.Int8
instance Data.ByteString.Conversion.To.ToByteString GHC.Int.Int16
instance Data.ByteString.Conversion.To.ToByteString GHC.Int.Int32
instance Data.ByteString.Conversion.To.ToByteString GHC.Int.Int64
instance Data.ByteString.Conversion.To.ToByteString GHC.Integer.Type.Integer
instance Data.ByteString.Conversion.To.ToByteString GHC.Types.Word
instance Data.ByteString.Conversion.To.ToByteString GHC.Word.Word8
instance Data.ByteString.Conversion.To.ToByteString GHC.Word.Word16
instance Data.ByteString.Conversion.To.ToByteString GHC.Word.Word32
instance Data.ByteString.Conversion.To.ToByteString GHC.Word.Word64
instance Data.ByteString.Conversion.To.ToByteString (Data.ByteString.Conversion.Internal.Hex GHC.Types.Int)
instance Data.ByteString.Conversion.To.ToByteString (Data.ByteString.Conversion.Internal.Hex GHC.Int.Int8)
instance Data.ByteString.Conversion.To.ToByteString (Data.ByteString.Conversion.Internal.Hex GHC.Int.Int16)
instance Data.ByteString.Conversion.To.ToByteString (Data.ByteString.Conversion.Internal.Hex GHC.Int.Int32)
instance Data.ByteString.Conversion.To.ToByteString (Data.ByteString.Conversion.Internal.Hex GHC.Int.Int64)
instance Data.ByteString.Conversion.To.ToByteString (Data.ByteString.Conversion.Internal.Hex GHC.Types.Word)
instance Data.ByteString.Conversion.To.ToByteString (Data.ByteString.Conversion.Internal.Hex GHC.Word.Word8)
instance Data.ByteString.Conversion.To.ToByteString (Data.ByteString.Conversion.Internal.Hex GHC.Word.Word16)
instance Data.ByteString.Conversion.To.ToByteString (Data.ByteString.Conversion.Internal.Hex GHC.Word.Word32)
instance Data.ByteString.Conversion.To.ToByteString (Data.ByteString.Conversion.Internal.Hex GHC.Word.Word64)
instance Data.ByteString.Conversion.To.ToByteString a => Data.ByteString.Conversion.To.ToByteString (Data.ByteString.Conversion.Internal.List a)
instance Data.ByteString.Conversion.To.ToByteString GHC.Types.Bool
instance Data.ByteString.Conversion.To.ToByteString a => Data.ByteString.Conversion.To.ToByteString (Data.CaseInsensitive.Internal.CI a)

module Data.ByteString.Conversion
class ToByteString a
builder :: ToByteString a => a -> Builder

-- | Parse <a>ByteString</a>s.
class FromByteString a
parser :: FromByteString a => Parser a

-- | Newtype wrapper to parse and produce integral numbers in hexadecimal
--   format
newtype Hex a
Hex :: a -> Hex a
[fromHex] :: Hex a -> a

-- | Newtype wrapper to parse and produce a comma separated list of values.
newtype List a
List :: [a] -> List a
[fromList] :: List a -> [a]
toByteString :: ToByteString a => a -> ByteString

-- | Please note that this needs to convert from a lazy <a>ByteString</a>
--   to a strict one which involves copying the whole string.
toByteString' :: ToByteString a => a -> ByteString
runBuilder :: Builder -> ByteString
fromByteString :: FromByteString a => ByteString -> Maybe a
fromByteString' :: FromByteString a => ByteString -> Maybe a
runParser :: Parser a -> ByteString -> Either String a
runParser' :: Parser a -> ByteString -> Either String a
