-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


@package restyler
@version 0.0.0

module Restyler.Prelude.NoApp

-- | <tt><a>any</a></tt> lifted to <tt><a>Monad</a></tt>
anyM :: Monad m => (a -> m Bool) -> [a] -> m Bool

-- | <tt><a>when</a></tt> with a monadic condition
--   
--   <pre>
--   x &lt;- someMonadicConditional
--   when x $ do
--       someMonadicAction
--   
--   whenM someMonadicConditional someMonadicAction
--   </pre>
whenM :: Monad m => m Bool -> m () -> m ()

-- | Same for <tt><a>unless</a></tt>
unlessM :: Monad m => m Bool -> m () -> m ()

-- | Like <tt><a>hush</a></tt>, but for <tt><a>MonadError</a> e m</tt>
--   instead of <tt><a>Either</a></tt>
hushM :: MonadError e m => m a -> m (Maybe a)

-- | <tt><a>Show</a></tt> as <tt><a>Text</a></tt>
tshow :: Show a => a -> Text

-- | <tt><a>fmap</a></tt> for doubly-wrapped values
(<$$>) :: (Functor f, Functor g) => (a -> b) -> f (g a) -> f (g b)
infixl 4 <$$>

module Restyler.Config.Interpreter
data Interpreter
Sh :: Interpreter
Bash :: Interpreter
Python :: Interpreter
Ruby :: Interpreter

-- | Does that path start with a <i>shebang</i> for the given
--   <tt><a>Interpreter</a></tt>
hasInterpreter :: FilePath -> Interpreter -> IO Bool
instance GHC.Show.Show Restyler.Config.Interpreter.Interpreter
instance GHC.Classes.Eq Restyler.Config.Interpreter.Interpreter
instance Data.Aeson.Types.FromJSON.FromJSON Restyler.Config.Interpreter.Interpreter

module Restyler.Config.Include
data Include

-- | <pre>
--   **/*.hs
--   </pre>
Include :: Pattern -> Include

-- | <pre>
--   !**/*.temp
--   </pre>
Negated :: Pattern -> Include

-- | Determine if a set of <tt><a>Include</a></tt>s match a file
--   
--   Don't try to over-think this. It works how you would expect, and you
--   can confirm in its test cases.
includePath :: [Include] -> FilePath -> Bool
instance GHC.Show.Show Restyler.Config.Include.Include
instance GHC.Classes.Eq Restyler.Config.Include.Include
instance Data.Aeson.Types.FromJSON.FromJSON Restyler.Config.Include.Include
instance Data.String.IsString Restyler.Config.Include.Include

module Restyler.Config

-- | Top-level configuration object
data Config
Config :: Bool -> Bool -> StatusesConfig -> [Restyler] -> Config

-- | Do anything at all?
[cEnabled] :: Config -> Bool

-- | Just push the restyling, don't comment?
[cAuto] :: Config -> Bool

-- | Send PR statuses?
[cStatusesConfig] :: Config -> StatusesConfig

-- | What restylers to run
[cRestylers] :: Config -> [Restyler]

-- | <pre>
--   .restyled.yaml
--   </pre>
configPath :: FilePath

-- | Configuration for sending PR statuses
data StatusesConfig
StatusesConfig :: Bool -> Bool -> Bool -> StatusesConfig

-- | Send a failure status when there were differences
[scDifferences] :: StatusesConfig -> Bool

-- | Send a success status when there were no differences
[scNoDifferences] :: StatusesConfig -> Bool

-- | Send a failure status when there were errors
[scError] :: StatusesConfig -> Bool

-- | How to run a given restyler
data Restyler
Restyler :: String -> String -> [String] -> [Include] -> [Interpreter] -> Bool -> Restyler

-- | Unique name for this restyler, not configurable
[rName] :: Restyler -> String

-- | Command to run, usually the name, not configurable
[rCommand] :: Restyler -> String

-- | Arguments to pass before the paths
[rArguments] :: Restyler -> [String]

-- | Patterns to match for files to restyle
[rInclude] :: Restyler -> [Include]

-- | Interpreters to check for
[rInterpreters] :: Restyler -> [Interpreter]

-- | Can we pass <tt>--</tt> between arguments and paths
[rSupportsArgSep] :: Restyler -> Bool

-- | Default configuration
--   
--   <ul>
--   <li>Enabled</li>
--   <li>Not Auto</li>
--   <li>Send statuses</li>
--   <li>Run most restylers</li>
--   </ul>
defaultConfig :: Config
namedRestyler :: MonadPlus m => Text -> m Restyler
unsafeNamedRestyler :: Text -> Restyler
instance GHC.Show.Show Restyler.Config.Config
instance GHC.Classes.Eq Restyler.Config.Config
instance GHC.Show.Show Restyler.Config.Restyler
instance GHC.Classes.Eq Restyler.Config.Restyler
instance GHC.Show.Show Restyler.Config.StatusesConfig
instance GHC.Classes.Eq Restyler.Config.StatusesConfig
instance Data.Aeson.Types.FromJSON.FromJSON Restyler.Config.Config
instance Data.Aeson.Types.FromJSON.FromJSON Restyler.Config.Restyler
instance Data.Aeson.Types.FromJSON.FromJSON Restyler.Config.StatusesConfig

module Restyler.App

-- | Application environment
data App
App :: LogLevel -> Text -> PullRequest -> Config -> App
[appLogLevel] :: App -> LogLevel
[appAccessToken] :: App -> Text

-- | The <tt><a>PullRequest</a></tt> we are restyling
[appPullRequest] :: App -> PullRequest

-- | Configuration loaded from <tt>.restyled.yaml</tt>
[appConfig] :: App -> Config

-- | A type alias for our Reader-Logging-Except-IO stack
type AppM = ReaderT App (LoggingT (ExceptT AppError IO))

-- | Run an <tt><a>AppM</a> a</tt>, producing an <tt><a>AppError</a></tt>
--   or an <tt>a</tt>
runApp :: App -> AppM a -> ExceptT AppError IO a

-- | <tt><a>liftIO</a></tt>, but catch <tt><a>IOException</a></tt>s into
--   <tt><a>AppError</a></tt>s
--   
--   Strive to always use this.
liftIOApp :: IO a -> AppM a

-- | All possible application error conditions
data AppError

-- | We couldn't fetch the <tt><a>PullRequest</a></tt> to restyle
PullRequestFetchError :: Error -> AppError

-- | We couldn't clone or checkout the PR's branch
PullRequestCloneError :: IOException -> AppError

-- | We couldn't load a <tt>.restyled.yaml</tt>
ConfigurationError :: String -> AppError

-- | We encountered a GitHub API error during restyling
GitHubError :: Error -> AppError

-- | A minor escape hatch for <tt><a>IOException</a></tt>s
OtherError :: IOException -> AppError

-- | Run a computation, and modify any thrown <tt><a>AppError</a></tt>s
mapAppError :: (AppError -> AppError) -> AppM a -> AppM a
instance GHC.Show.Show Restyler.App.AppError

module Restyler.Directory
doesFileExist :: FilePath -> AppM Bool
getCurrentDirectory :: AppM FilePath
setCurrentDirectory :: FilePath -> AppM ()

module Restyler.Process
callProcess :: String -> [String] -> AppM ()
readProcess :: String -> [String] -> String -> AppM String
readProcessMay :: String -> [String] -> String -> AppM (Maybe String)


-- | Consolidated imports
--   
--   See <tt><a>Restyler.Prelude.NoApp</a></tt> for core functionality.
module Restyler.Prelude

module Restyler.GitHub

-- | Run a GitHub <tt><a>Request</a></tt>
runGitHub :: Request k a -> AppM a

-- | <tt><a>runGitHub</a></tt> but discard the result
runGitHub_ :: Request k a -> AppM ()

-- | Show a GitHub <tt><a>Request</a></tt>, useful for debugging
showGitHubRequest :: Request k a -> Text

-- | Show a GitHub <tt><a>Error</a></tt>
--   
--   This relies on <tt><tt>HttpException</tt></tt> not leaking anything
--   sensitive for our use-cases, which is true for now (e.g. it masks
--   <tt>Authorization</tt> headers).
showGitHubError :: Error -> String

module Restyler.Git

-- | <pre>
--   git clone &lt;url&gt; &lt;directory&gt;
--   </pre>
cloneRepository :: Text -> FilePath -> AppM ()

-- | <pre>
--   git checkout [-b] &lt;branch&gt;
--   </pre>
checkoutBranch :: Bool -> Text -> AppM ()

-- | <pre>
--   git diff --name-only &lt;branch&gt;
--   </pre>
changedPaths :: Text -> AppM [FilePath]

-- | <pre>
--   git commit --all --message &lt;message&gt;
--   </pre>
commitAll :: Text -> AppM ()

-- | <pre>
--   git fetch origin &lt;remote&gt;:&lt;local&gt;
--   </pre>
fetchOrigin :: Text -> Text -> AppM ()

-- | <pre>
--   git push origin &lt;branch&gt;
--   </pre>
pushOrigin :: Text -> AppM ()

-- | <pre>
--   git push --force-with-lease origin &lt;branch&gt;
--   </pre>
forcePushOrigin :: Text -> AppM ()

-- | <pre>
--   git log -n 1 --format=%B &lt;branch&gt;
--   </pre>
branchHeadMessage :: Text -> AppM (Maybe Text)

module Restyler.Core

-- | Run the main restyling process
restyle :: [Restyler] -> [FilePath] -> AppM ()


-- | String specification of a Repository's Pull Request
--   
--   This shortened format is useful for passing a Pull Request as a
--   command-line argument, or showing it in log messages.
--   
--   <b>N.B.</b>: this should probably be called <tt>PullRequestSpec</tt>,
--   or perhaps in-lined into <tt><a>Restyler.PullRequest</a></tt>.
module Restyler.RepoSpec
data RepoSpec
RepoSpec :: Name Owner -> Name Repo -> Int -> RepoSpec
[rsOwner] :: RepoSpec -> Name Owner
[rsRepo] :: RepoSpec -> Name Repo
[rsPullRequest] :: RepoSpec -> Int

-- | Parse <tt>&lt;owner&gt;/&lt;name&gt;#&lt;number&gt;</tt> into a
--   <tt><a>RepoSpec</a></tt>
parseRepoSpec :: String -> Either String RepoSpec

-- | Inverse of <tt><a>parseRepoSpec</a></tt>
showRepoSpec :: RepoSpec -> Text
instance GHC.Show.Show Restyler.RepoSpec.RepoSpec
instance GHC.Classes.Eq Restyler.RepoSpec.RepoSpec

module Restyler.PullRequest
pullRequestOwnerName :: PullRequest -> Name Owner
pullRequestRepoName :: HasCallStack => PullRequest -> Name Repo
pullRequestRepoSpec :: HasCallStack => PullRequest -> RepoSpec
pullRequestRepoURL :: HasCallStack => PullRequest -> Text
pullRequestURL :: HasCallStack => PullRequest -> Text

-- | Some API actions need to treat the PR like an Issue
pullRequestIssueId :: PullRequest -> Id Issue
pullRequestIsFork :: PullRequest -> Bool
pullRequestBaseRef :: PullRequest -> Text
pullRequestHeadRef :: PullRequest -> Text
pullRequestRemoteHeadRef :: PullRequest -> Text
pullRequestLocalHeadRef :: PullRequest -> Text
pullRequestRestyledRef :: PullRequest -> Text

module Restyler.PullRequest.Status
data PullRequestStatus

-- | We found no differences after restyling
NoDifferencesStatus :: PullRequestStatus

-- | We found differences and opened a restyled <tt><a>PullRequest</a></tt>
DifferencesStatus :: PullRequest -> PullRequestStatus

-- | We encountered an error and can link to a Job
ErrorStatus :: URL -> PullRequestStatus

-- | Send a <tt><a>PullRequestStatus</a></tt> for the original Pull Request
sendPullRequestStatus :: PullRequestStatus -> AppM ()

-- | <tt><a>sendPullRequestStatus</a></tt> but ignore any exceptions
--   
--   This is useful for emitting the Errored status, where we wouldn't want
--   an exception here to muddy the debugging of the error we're reporting.
sendPullRequestStatus_ :: PullRequestStatus -> AppM ()

module Restyler.Content

-- | Simple for now: <tt>Restyled</tt>
commitMessage :: Text

-- | The comment to leave about a restyled Pull Request
commentBody :: PullRequest -> Text

-- | The more complicated comment to leave when we restyled PRs from forks
commentBodyFork :: PullRequest -> Text

module Restyler.PullRequest.Restyled

-- | See if a branch exists with our name and message
restyledPullRequestExists :: AppM Bool

-- | Commit and push to the (new) restyled branch, and open a PR for it
createRestyledPullRequest :: AppM PullRequest

-- | Commit and force-push to the (existing) restyled branch
updateRestyledPullRequest :: AppM ()

-- | Commit and push to current branch
updateOriginalPullRequest :: AppM ()

module Restyler.Comments

-- | Leave a comment on the original PR, mentioning the given Restyled PR
leaveRestyledComment :: PullRequest -> AppM ()

-- | Locate any comments left by us on the origin PR and delete them
clearRestyledComments :: AppM ()

module Restyler.Options
data Options
Options :: Text -> LogLevel -> Name Owner -> Name Repo -> Int -> Maybe URL -> Options

-- | Personal or Installation access token
[oAccessToken] :: Options -> Text
[oLogLevel] :: Options -> LogLevel
[oOwner] :: Options -> Name Owner
[oRepo] :: Options -> Name Repo
[oPullRequest] :: Options -> Int
[oJobUrl] :: Options -> Maybe URL

-- | Parse required environment variables and command-line options
--   
--   Environment variables:
--   
--   <ul>
--   <li><pre>DEBUG=1</pre></li>
--   <li><tt>GITHUB_ACCESS_TOKEN=</tt> (required)</li>
--   </ul>
--   
--   Usage:
--   
--   <pre>
--   restyler [--job-url &lt;url&gt;@] &lt;owner&gt;/&lt;repo&gt;#&lt;number&gt;
--   </pre>
parseOptions :: IO Options

module Restyler.App.Run

-- | Bootstrap the initial <tt><a>App</a></tt> type
--   
--   We want to have the <tt><a>PullRequest</a></tt> and
--   <tt><a>Config</a></tt> in our application environment, so we need them
--   to construct an <tt><a>App</a></tt>. However, it's valuable to use our
--   normal <tt><a>AppM</a></tt> actions to interact with GitHub or call
--   processes so we get the same logging and error-handling there.
--   
--   So this function builds a partial <tt><a>App</a></tt> type, then uses
--   it to run <tt><a>AppM</a></tt> actions to add the rest of the data
--   before returning it.
bootstrapApp :: Options -> FilePath -> ExceptT AppError IO App

module Restyler.Main

-- | The main entrypoint for the restyler CLI
--   
--   Parses command-line options, creates a temporary working directory and
--   runs the restyling process. Application errors are reported to
--   <tt>stderr</tt> before a non-zero exit.
--   
--   See <tt><a>parseOptions</a></tt> for usage information.
restylerMain :: IO ()
